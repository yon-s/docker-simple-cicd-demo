#任意の名前
name: Deploy Simple CI/CD 

#mainブランチにpushをトリガー
on:
  push:
    branches: ["main"]

#環境変数
env:
  #リージョンの設定
  AWS_REGION: us-west-2
  #サービス名
  ECS_SERVICE: simple-cicd-service
  #クラスター名
  ECS_CLUSTER: simple-cicd-cluster
  #タスク定義のファイル
  ECS_TASK_DEFINITION: .aws/task-definition.json

permissions:
  contents: read

#実際に実行される処理
jobs:
  #任意の名前
  web-test-build-image:
    #任意の名前（githubで表示）
    name: Web Container - Test and Build
    #jobsを実行する環境
    runs-on: ubuntu-20.04
    #タイムアウト時間（分）
    timeout-minutes: 10
    #jobs が実行されるディレクトリー
    defaults:
      run:
        working-directory: web
    #ー　を一個一個実行
    steps:
      #uses=第三者のワークフローを使う
      #actions/checkout@v3 = jobの環境にファイルをダウンロード
      #githubactionsのお作法
      - uses: actions/checkout@v3
      #任意の名前
      - name: Build an Image and Run Tests
        #イメージ作成
        ## docker image build --target production = Productionモードを実行
        ## -t temp_web_image_name:latest = イメージ名をつける
        # --build-arg REACT_APP_API_SERVER=/api =　REACT_APP_API_SERVER　引数　/api値
        run: |
          docker image build --target production -t temp_web_image_name:latest --build-arg REACT_APP_API_SERVER=/api .
        #AWSの秘密情報
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          #GitHubの環境変数secretsから参照
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
        #ECRにログイン
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        #ECRにプッシュ
      - name: Push the image to Amazon ECR
        env:
          #ログインしたECRのレジストリー情報を受取る
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_WEB_SERVER_REPOSITORY }}
        #イメージに対して名前を変更
        #ECRにプッシュ
        run: |
          docker image tag temp_web_image_name:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
  #任意の名前
  api-test-build-image:
    #任意の名前
    name: API Container - Test and Build
    #実行環境
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    defaults:
      run:
        working-directory: api
  
    steps:
      - uses: actions/checkout@v3
      #テストとビルド
      - name: Build an Image and Run Tests
        run: |
          docker image build --target production -t temp_api_image_name:latest .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push the image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_API_SERVER_REPOSITORY }}
        run: |
          docker image tag temp_api_image_name:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    name: Deploy
    runs-on: ubuntu-20.04 
    #２つのjobsが終わっている必要がある
    needs: [web-test-build-image, api-test-build-image]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      #タスク定義の中のWEBコンテナのイメージIDを最新に
      - name: Fill in the new image ID in the Amazon ECS task definition for web
        id: render-web-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: web
          image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_ECR_WEB_SERVER_REPOSITORY }}
      #タスク定義の中のAPIコンテナのイメージIDを最新に
      - name: Fill in the new image ID in the Amazon ECS task definition for api
        id: render-api-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-web-task-def.outputs.task-definition }}
          container-name: api
          image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_ECR_API_SERVER_REPOSITORY }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-api-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

# Web Container Build/Test
## Get Source
## Build/Test
## Docker Image Build
## Login AWS
## Push image to ECR

# API Container Build/Test
## Get Source
## Build/Test
## Docker Image Build
## Login AWS
## Push image to ECR

# Deploy
## Get Source
## Login AWS
## Edit Task Definition
## Deploy




